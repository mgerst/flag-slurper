import pytest
from hypothesis import given, assume
from hypothesis.strategies import text

from flag_slurper.autolib import exploit


@pytest.fixture
def ssh_mock(mocker):
    ssh = mocker.MagicMock()
    stdout = mocker.MagicMock()
    ssh.exec_command.return_value = None, stdout, None
    stdout.read().splitlines.return_value = ['./test.txt'.encode('utf-8')]
    return ssh, stdout


@pytest.mark.parametrize('err', exploit.FILTERED_ERRORS)
def test_log_error_filtered(mocker, err):
    logger = mocker.MagicMock()
    mocker.patch('flag_slurper.autolib.exploit.logger.error', logger)
    exploit.log_error('There was an error', 'test', err)
    assert not logger.called


@given(err=text())
def test_log_error(mocker, err):
    assume(err not in exploit.FILTERED_ERRORS)
    logger = mocker.MagicMock()
    mocker.patch('flag_slurper.autolib.exploit.logger.error', logger)
    exploit.log_error('There was an error', 'test', err)
    assert logger.called


def test_find_flags(mocker, ssh_mock):
    contents = 'abcdefghijklmnop'

    ssh, stdout = ssh_mock
    get_file_contents = mocker.MagicMock()
    get_file_contents.return_value = contents
    mocker.patch('flag_slurper.autolib.exploit.get_file_contents', get_file_contents)

    assert exploit.find_flags(ssh) == [('./test.txt', contents)]
    assert get_file_contents.called


def test_find_flags_no_contents(mocker, ssh_mock):
    ssh, stdout = ssh_mock
    get_file_contents = mocker.MagicMock()
    get_file_contents.return_value(False)
    mocker.patch('flag_slurper.autolib.exploit.get_file_contents', get_file_contents)

    assert not exploit.find_flags(ssh)
    assert get_file_contents.called
